import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class Main {
    public static void main(String[] args) {
        // Create a single-thread executor
        ExecutorService executor = Executors.newSingleThreadExecutor();

        // Define tasks
        Runnable task1 = () -> System.out.println("Task 1 is running...");
        Runnable task2 = () -> System.out.println("Task 2 is running...");
        Runnable task3 = () -> System.out.println("Task 3 is running...");

        try {
            // Submit and wait for each task sequentially
            Future<?> future1 = executor.submit(task1);
            future1.get(); // Wait for task 1 to complete

            Future<?> future2 = executor.submit(task2);
            future2.get(); // Wait for task 2 to complete

            Future<?> future3 = executor.submit(task3);
            future3.get(); // Wait for task 3 to complete
        } catch (Exception e) {
            System.out.println("An exception occurred: " + e.getMessage());
        } finally {
            // Shutdown the executor
            executor.shutdown();
        }
    }
}


##running executor pool 

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class ThreadPoolExample {

    public static void main(String[] args) {
        // Create a fixed thread pool with a single thread
        ExecutorService executorService = Executors.newFixedThreadPool(1);

        // Submit a long-running task
        executorService.submit(() -> {
            try {
                while (true) {
                    System.out.println("Thread is running...");
                    // Simulate some work
                    TimeUnit.SECONDS.sleep(1);
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt(); // Restore interrupted status
                System.out.println("Thread interrupted, stopping...");
            }
        });

        // Keep the application running for a while (simulate the main thread's work)
        try {
            TimeUnit.SECONDS.sleep(10); // Let the thread run for 10 seconds
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        // Shut down the ExecutorService gracefully
        executorService.shutdown();
        try {
            if (!executorService.awaitTermination(5, TimeUnit.SECONDS)) {
                executorService.shutdownNow();
            }
        } catch (InterruptedException e) {
            executorService.shutdownNow();
        }

        System.out.println("ExecutorService has been shut down.");
    }
}

